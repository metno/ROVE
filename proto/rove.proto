syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package rove;

service Rove {
  rpc Validate (ValidateRequest) returns (ValidateResponse) {}
}

message GeoPoint {
  double lat = 1;
  double lon = 2;
}

message Polygon {
  repeated GeoPoint polygon = 1;
}

enum Flag { // WIP
  PASS = 0;
  FAIL = 1;
  WARN = 2;
  INCONCLUSIVE = 3;
  INVALID = 4;
  DATA_MISSING = 5;
  ISOLATED = 6;
}

message ValidateRequest {
  // name of the data source you want to QC data from
  string data_source = 1;
  // extra data sources providing data to help QC the first source, but the data
  // from these sources will not be QCed themselves
  repeated string backing_sources = 2;
  // timestamps defining an inclusive range of time to QC data from
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  // an ISO 8601 duration stamp defining the time resolution of data do be QCed
  // (e.g. "PT1H" for hourly data)
  string time_resolution = 5;
  // one of 3 specifiers can be used to spatially specify down the data to be
  // QCed
  oneof SpaceSpec {
    // one series of data (i.e one data point per time step) with a string that
    // will be passed to the data connector to identify it. This will likely
    // represent something like a timeseries id, station id and param id pair,
    // or similar, but is left up to the data connector/source to define
    string one = 6;
    // a series of lat-lon points defining a polygon in space
    Polygon polygon = 7;
    // no spatial restriction at all
    google.protobuf.Empty all = 8;
  }
  // name of the pipeline of checks to be run on the data
  string pipeline = 9;
  // optional string containing extra information to be passed to the data
  // connector, to further specify the data to be QCed
  optional string extra_spec = 10;
}

message FlagSeries {
  // data source defined identifier, it's recommended to use this to identify
  // a timeseries/station/location as appropriate
  string id = 1;
  // flags indicating the results of running the check on each element of the
  // given timeseries. The time in the timeseries each flag applies to is 
  // `start_time` + (`time_resolution` * index), where `start_time` and
  // `time_resolution` are arguments given in the `ValidateRequest`
  repeated Flag flags = 2;
}

message CheckResult {
  // name of the check these results apply to
  string check = 1;
  // each of these encodes the results for one timeseries
  repeated FlagSeries flag_series = 2;
}

message ValidateResponse {
  // each of these contain the results from running a single check on the
  // requested data, further broken down by timeseries
  repeated CheckResult results = 1;
}
